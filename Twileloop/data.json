[
  {
    "Description": "An all in one library that centralizes multiple algorithms for encoding, encrypting and hashing in one place to be used anywhere in your code.",
    "GithubURL": "https://github.com/sangeethnandakumar/Twileloop.Security",
    "HTMLContent": "\u003Cp\u003E\uFEFF\u003C!-- PROJECT LOGO --\u003E\n\u003Cbr /\u003E\u003C/p\u003E\n\u003Cdiv align=\u0022center\u0022\u003E\n  \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.Security\u0022\u003E\n    \u003Cimg src=\u0022https://iili.io/HUE81eI.png\u0022 alt=\u0022Logo\u0022 width=\u002280\u0022 height=\u002280\u0022\u003E\n  \u003C/a\u003E\n  \u003Ch1 align=\u0022center\u0022\u003E Twileloop.Security \u003C/h1\u003E\n  \u003Ch4 align=\u0022center\u0022\u003E Encode | Encrypt | Hash \u003C/h4\u003E\n\u003C/div\u003E\n\u003Cp\u003ERead full integration guide: https://packages.twileloop.com/Twileloop.Security\u003C/p\u003E\n\u003Cp\u003EMore trusted packages from Twileloop: https://packages.twileloop.com\u003C/p\u003E\n\u003Ch2\u003EAbout\u003C/h2\u003E\n\u003Cp\u003EAn all in one library that centralizes multiple algorithms for encoding, encrypting and hashing in one place to be used anywhere in your code.\u003C/p\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C/strong\u003E\n\u003Cem\u003E\u003Cstrong\u003EStarting from version v2.0\u002B and above, This is the official documentation. For older versions, Refer old documentation \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.Security/blob/master/README_Old.md\u0022\u003E\nhere\n\u003C/a\u003E\u003C/strong\u003E\u003C/em\u003E\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch2\u003ELicense\u003C/h2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ETwileloop.Security is licensed under the MIT License. See the LICENSE file for more details.\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch4\u003EThis library is absolutely free. If it gives you a smile, A small coffee would be a great way to support my work. Thank you for considering it!\u003C/h4\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.buymeacoffee.com/sangeethnanda\u0022\u003E\u003Cimg src=\u0022https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\u0022 alt=\u0022\u0026quot;Buy Me A Coffee\u0026quot;\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Ch2\u003E1. Install Package\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-bash\u0022\u003Edotnet add package Twileloop.Security\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3\u003ESupported Algorithms\u003C/h3\u003E\n\u003Cp\u003E| Encoding Algorithms | Encryption Algorithms | Hashing Algorithms\n| ---      | ---       | ---\n| \u2705 ASCII | \u2705 AES | \u2705 MD5\n| \u2705 UTF-8 | \u2705 RSA | \u2705 SHA1\n| \u2705 Base64 | | \u2705 SHA256\n| \u2705 Hex | | \u2705 SHA3\n| \u2705 Binary | | \u2705 Blake2\n| | | \u2705 BCrypt\n| | | \u2705 Argon2\u003C/p\u003E\n\u003Ch2\u003E2. Encode/Decode Text\u003C/h2\u003E\n\u003Cp\u003EEncode or decode text in multiple supported formats\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Encoding Algorithms\n    //-------------------------------\n\n    //1. ASCII\n    var data1 = ASCIIEncoder.Encode(\u0026quot;English\u0026quot;);\n    var data2 = ASCIIEncoder.Decode(data1);\n    \n    //2. UTF-8\n    var data3 = UTF8Encoder.Encode(\u0026quot;\u0D2E\u0D32\u0D2F\u0D3E\u0D33\u0D02\u0026quot;);\n    var data4 = UTF8Encoder.Decode(data3);\n    \n    //3. Base64\n    var data5 = Base64Encoder.Encode(\u0026quot;\u092E\u0948\u0902 \u0924\u0941\u092E\u0938\u0947 \u092A\u094D\u092F\u093E\u0930 \u0915\u0930\u0924\u093E \u0939\u0942\u0901\u0026quot;);\n    var data6 = Base64Encoder.Decode(data5);\n    \n    //4. Hex\n    var data7 = HexEncoder.Encode(\u0026quot;\u0623\u0646\u0627 \u0630\u0627\u0647\u0628\u0026quot;);\n    var data8 = HexEncoder.Decode(data7);\n    \n    //5. Binary\n    var data9 = BinaryEncoder.Encode(\u0026quot;\u0BA8\u0BBE\u0BA9\u0BCD \u0B89\u0BA9\u0BCD\u0BA9\u0BC8 \u0B85\u0BA9\u0BCD\u0BAA\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BB0\u0BBF\u0BAF\u0BC7\u0BA9\u0BCD\u0026quot;);\n    var data10 = BinaryEncoder.Decode(data9);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E3. Encrypt/Decrypt Text or File\u003C/h2\u003E\n\u003Cp\u003EEncrypt or decrypt text or file in multiple supported formats\u003C/p\u003E\n\u003Ch4\u003EAES\u003C/h4\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //1. AES (Text)\n    var aesEncryptedData = AESAlgorithm.EncryptText(\u0026quot;Twileloop\u0026quot;, key: \u0026quot;1234\u0026quot;, iv: \u0026quot;1234567890123456\u0026quot;);\n    var aesDecryptedData = AESAlgorithm.DecryptText(aesEncryptedData, key: \u0026quot;1234\u0026quot;, iv: \u0026quot;1234567890123456\u0026quot;);\n    \n    //2. AES (File)\n    AESAlgorithm.EncryptFile(@\u0026quot;D:\\data.txt\u0026quot;, @\u0026quot;D:\\data_aes_encrypted.aes\u0026quot;, key: \u0026quot;1234\u0026quot;, iv: \u0026quot;1234567890123456\u0026quot;);\n    AESAlgorithm.DecryptFile(@\u0026quot;D:\\data_aes_encrypted.aes\u0026quot;, @\u0026quot;D:\\data_aes_decrypted.txt\u0026quot;, key: \u0026quot;1234\u0026quot;, iv: \u0026quot;1234567890123456\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch4\u003ERSA\u003C/h4\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Make Keys\n    RSAAlgorithm.MakeRSAKeyPairs(out RSAParameters publicKey, out RSAParameters privateKey);\n    \n    //1. RSA (Text)    \n    var rsaEncryptedData = RSAAlgorithm.EncryptText(\u0026quot;Twileloop\u0026quot;, publicKey);\n    var rsaDecryptedData = RSAAlgorithm.DecryptText(rsaEncryptedData, privateKey);\n    \n    //2. RSA (File)\n    RSAAlgorithm.EncryptFile(@\u0026quot;D:\\data.txt\u0026quot;, @\u0026quot;D:\\data_rsa_encrypted.rsa\u0026quot;, publicKey);\n    RSAAlgorithm.DecryptFile(@\u0026quot;D:\\data_rsa_encrypted.rsa\u0026quot;, @\u0026quot;D:\\data_rsa_decrypted.txt\u0026quot;, privateKey);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E4. Hash Text\u003C/h2\u003E\n\u003Cp\u003EHash text in multiple supported formats\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    // Hashing Algorithms\n    //-------------------------------\n\n    //1 - MD5\n    var hash1 = MD5Algorithm.Hash(\u0026quot;Sangeeth Nandakumar\u0026quot;);\n    \n    //2 - SHA1\n    var hash2 = SHAAlgorithm.HashUsingSHA1(\u0026quot;Sangeeth Nandakumar\u0026quot;);\n    \n    //3 - SHA256 \n    var hash3 = SHAAlgorithm.HashUsingSHA256(\u0026quot;Sangeeth Nandakumar\u0026quot;);\n    \n    //4 - SHA3 \n    var hash4 = SHAAlgorithm.HashUsingSHA3(\u0026quot;Sangeeth Nandakumar\u0026quot;);\n    \n    //5 - Blake2 \n    var hash5 = Blake2DigestAlgorithm.Hash(\u0026quot;Sangeeth Nandakumar\u0026quot;);\n    \n    //6 - BCrypt \n    var hash7 = BCryptAlgorithm.Hash(\u0026quot;Sangeeth Nandakumar\u0026quot;, workFactor: 11);\n    \n    //7 - Argon2\n    var hash8 = Argon2Algorithm.Hash(\u0026quot;Sangeeth Nandakumar\u0026quot;, byteSize: 32, iterations: 1, memorySizeKB: 4096, degreeOfParallelism: 1);\n\u003C/code\u003E\u003C/pre\u003E\n",
    "Name": "Twileloop.Security",
    "PackageIcon": "https://iili.io/HUE81eI.png"
  },
  {
    "Name": "Twileloop.UOW",
    "GithubURL": "https://github.com/sangeethnandakumar/Twileloop.UOW",
    "HTMLContent": "\u003C!-- PROJECT LOGO --\u003E\n\u003Cbr /\u003E\n\u003Cdiv align=\u0022center\u0022\u003E\n  \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.UOW\u0022\u003E\n    \u003Cimg src=\u0022https://iili.io/HeD5SzG.png\u0022 alt=\u0022Logo\u0022 width=\u002280\u0022 height=\u002280\u0022\u003E\n  \u003C/a\u003E\n  \u003Ch1 align=\u0022center\u0022\u003E Twileloop.UOW (Unit Of Work - With LiteDB) \u003C/h1\u003E\n  \u003Ch4 align=\u0022center\u0022\u003E Free | Open-Source | Fast \u003C/h4\u003E\n\u003C/div\u003E\n\u003Cp\u003ERead full integration guide: https://packages.twileloop.com/Twileloop.UOW\u003C/p\u003E\n\u003Cp\u003EMore trusted packages from Twileloop: https://packages.twileloop.com\u003C/p\u003E\n\u003Ch2\u003EAbout\u003C/h2\u003E\n\u003Cp\u003EA lightweight and ready-made implementation of unit of work pattern \u002B LiteDB. With ability to use multiple LiteDB databases, ready-made CRUD operations repository, LiteDB\u0027s native transactions and thread-safe features.\u003C/p\u003E\n\u003Cp\u003EA plug \u0026amp; play package where you don\u0027t need to write lot and lot and lots of code to setp repositories and stuff. It\u0027s easy as 2 steps below\u003C/p\u003E\n\u003Ch2\u003ELicense\u003C/h2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ETwileloop.UOW is licensed under the MIT License. See the LICENSE file for more details.\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch4\u003EThis library is absolutely free. If it gives you a smile, A small coffee would be a great way to support my work. Thank you for considering it!\u003C/h4\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.buymeacoffee.com/sangeethnanda\u0022\u003E\u003Cimg src=\u0022https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\u0022 alt=\u0022\u0026quot;Buy Me A Coffee\u0026quot;\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Ch1\u003EUsage\u003C/h1\u003E\n\u003Ch2\u003E1. Register all databases\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Ebuilder.Services.AddUnitOfWork((uow) =\u0026gt; {\n    uow.Connections = new List\u0026lt;LiteDBConnection\u0026gt;\n    {\n        new LiteDBConnection(\u0026quot;\u0026lt;DB_NAME_1\u0026gt;\u0026quot;, \u0026quot;Filename=DatabaseA.db; Mode=Shared; Password=****;\u0026quot;),\n        new LiteDBConnection(\u0026quot;\u0026lt;DB_NAME_2\u0026gt;\u0026quot;, \u0026quot;Filename=DatabaseB.db; Mode=Shared; Password=****;\u0026quot;)\n    };\n});\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E2. Inject and Use as required\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    [ApiController]\n    public class HomeController : ControllerBase \n    {\n        private readonly UnitOfWork uow;\n\n        public HomeController(UnitOfWork uow)\n        {\n            this.uow = uow;\n        }\n\n        [HttpGet]\n        public IActionResult Get() \n        {            \n            try\n            {\n                // Step 1: Point to a database\n                uow.UseDatabase(\u0026quot;\u0026lt;DB_NAME\u0026gt;\u0026quot;);\n\n                //Step 2: Get a repository for your model \u0027Dogs\u0027\n                var dogRepo = uow.GetRepository\u0026lt;Dogs\u0026gt;();\n\n                //Step 3: Do some fetch\n                allDogs = dogRepo.GetAll().ToList();\n\n                //Step 4: Or any CRUD operations you like\n                dogRepo.Add(new Dog());\n\n                //Step 5: Finally, commit or rollback if transaction need to maintain. That\u0027s it\n                uow.Commit();\n\n                return Ok(allDogs);\n            }\n            catch(Exception)\n            {\n                uow.Rollback();\n            }            \n        }\n\n    }\n\u003C/code\u003E\u003C/pre\u003E\n",
    "PackageIcon": "https://iili.io/HeD5SzG.png",
    "Description": "A lightweight and ready-made implementation of unit of work pattern \u002B LiteDB. With ability to use multiple LiteDB databases, ready-made CRUD operations repository, LiteDB\u0027s native transactions and thread-safe features."
  },
  {
    "Name": "Twileloop.Timezone",
    "GithubURL": "https://github.com/sangeethnandakumar/Twileloop.Timezone",
    "HTMLContent": "\u003Cp\u003E\uFEFF\uFEFF\u003C!-- PROJECT LOGO --\u003E\n\u003Cbr /\u003E\u003C/p\u003E\n\u003Cdiv align=\u0022center\u0022\u003E\n  \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.Timezone\u0022\u003E\n    \u003Cimg src=\u0022https://iili.io/HUQ2pxn.png\u0022 alt=\u0022Logo\u0022 width=\u002280\u0022 height=\u002280\u0022\u003E\n  \u003C/a\u003E\n  \u003Ch1 align=\u0022center\u0022\u003E Twileloop.Timezone \u003C/h1\u003E\n  \u003Ch4 align=\u0022center\u0022\u003E Convert | Migrate | Search \u003C/h4\u003E\n\u003C/div\u003E\n\u003Cp\u003ERead full integration guide: https://packages.twileloop.com/Twileloop.Timezone\u003C/p\u003E\n\u003Cp\u003EMore trusted packages from Twileloop: https://packages.twileloop.com\u003C/p\u003E\n\u003Ch2\u003EAbout\u003C/h2\u003E\n\u003Cp\u003EAn easy to use utility to easily convert timezones from any timezones, countries, offsets, short and long names etc.. while leveraging the powerfull NodaTime and globaliazation in the background.\u003C/p\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C/strong\u003E\n\u003Cem\u003E\u003Cstrong\u003EStarting from version v2.0\u002B and above, This is the official documentation. For older versions, Refer old documentation \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.Timezone/blob/master/README_Old.md\u0022\u003E\nhere\n\u003C/a\u003E\u003C/strong\u003E\u003C/em\u003E\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch2\u003ELicense\u003C/h2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ETwileloop.Timezone is licensed under the MIT License. See the LICENSE file for more details.\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch4\u003EThis library is absolutely free. If it gives you a smile, A small coffee would be a great way to support my work. Thank you for considering it!\u003C/h4\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.buymeacoffee.com/sangeethnanda\u0022\u003E\u003Cimg src=\u0022https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\u0022 alt=\u0022\u0026quot;Buy Me A Coffee\u0026quot;\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Ch2\u003E1. Install Package\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-bash\u0022\u003Edotnet add package Twileloop.Timezone\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch3\u003ESupported Features\u003C/h3\u003E\n\u003Cp\u003E| Status | From | | To\n| --- | --- | --- | ---\n| \u2705 | UTC timezone | \uD83E\uDC7A | System timezone\n| \u2705 | UTC timezone | \uD83E\uDC7A | Custom timezone\n| \u2705 | Custom timezone | \uD83E\uDC7A | UTC timezone\n| \u2705 | Custom timezone | \uD83E\uDC7A | Custom timezone\n| \u2705 | Timezone Abbreviation | \uD83E\uDC7A | Timezone Id\n| \u2705 | Timezone Id | \uD83E\uDC7A | Timezone Abbreviation\n| \u2705 | Timezone Id | \uD83E\uDC7A | Country ISO Codes (Under that timezone)\n| \u2705 | Country ISO Code | \uD83E\uDC7A | Timezone Ids (Under that country)\n| \u2705 | Country Name | \uD83E\uDC7A | Country ISO Code\n| \u2705 | Country ISO Code | \uD83E\uDC7A | Country Name\u003C/p\u003E\n\u003Ch2\u003E2. System timezone \uD83E\uDC7A UTC timezone\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//System timezone \uD83E\uDC7A UTC timezone\nvar utcTime = DateTime.UtcNow;\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E3. UTC timezone \uD83E\uDC7A System timezone\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//UTC timezone \uD83E\uDC7A System timezone\nvar mySystemTime = utcTime.UtcToSystemTimezone();\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E4. UTC timezone \uD83E\uDC7A Custom timezone\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//UTC timezone \uD83E\uDC7A Custom timezone\nvar japanTime = utcTime.UtcToCustomTimezone(\u0026quot;Asia/Tokyo\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E5. Custom timezone \uD83E\uDC7A UTC timezone\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//Custom timezone \uD83E\uDC7A UTC timezone\nvar japanTimeInUtc = japanTime.CustomTimezoneToUtc(\u0026quot;Asia/Tokyo\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E6. Custom timezone \uD83E\uDC7A Custom timezone\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//Custom timezone \uD83E\uDC7A Custom timezone\nvar indianTime = japanTime.MigrateToTimezone(\u0026quot;Asia/Tokyo\u0026quot;, \u0026quot;Asia/Kolkata\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E7. Timezone Abbreviation \uD83E\uDC7A Timezone Id\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E// Timezone Abbreviation \uD83E\uDC7A Timezone Id\nvar abbreviation = \u0026quot;IST\u0026quot;;\nvar (displayName, timeZoneIds) = TimezoneHelper.AbbreviationToTimezone(abbreviation);\n\nConsole.WriteLine($\u0026quot;Abbreviation: {abbreviation}\u0026quot;);\nConsole.WriteLine($\u0026quot;Full Display Name: {displayName}\u0026quot;);\nConsole.WriteLine(\u0026quot;Time Zone Identifiers:\u0026quot;);\n\nforeach (var timeZoneIda in timeZoneIds)\n{\n    Console.WriteLine(timeZoneIda);\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E8. Timezone Id \uD83E\uDC7A Timezone Abbreviation\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E// Timezone Id \uD83E\uDC7A Timezone Abbreviation\nvar timeZoneId = \u0026quot;Asia/Kolkata\u0026quot;;\nvar (zoneAbbreviation, zoneDisplayName) = TimezoneHelper.TimezoneToAbbreviation(timeZoneId);\n\nConsole.WriteLine($\u0026quot;Time Zone Identifier: {timeZoneId}\u0026quot;);\nConsole.WriteLine($\u0026quot;Abbreviation: {zoneAbbreviation}\u0026quot;);\nConsole.WriteLine($\u0026quot;Full Display Name: {zoneDisplayName}\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E9. Timezone Id \uD83E\uDC7A Countries Under Timezone\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E// Timezone Id \uD83E\uDC7A Country Codes\nstring timezone = \u0026quot;America/New_York\u0026quot;;\nList\u0026lt;(string CountryCode, string CountryName)\u0026gt; countriesUnderTimezone  = TimezoneHelper.GetCountriesUnderTimezone(timezone);\n\nConsole.WriteLine($\u0026quot;Countries under timezone \u0027{timezone}\u0027:\u0026quot;);\nforeach (var country in countriesUnderTimezone)\n{\n    Console.WriteLine($\u0026quot;{country.CountryCode} | {country.CountryName}\u0026quot;);\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E10. Country ISO Code \uD83E\uDC7A Timezones Under Country\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E// Country Code \uD83E\uDC7A Timezones\nstring countryCode = \u0026quot;US\u0026quot;;\nList\u0026lt;string\u0026gt; timezones = TimezoneHelper.GetTimezonesUnderCountry(countryCode);\nConsole.WriteLine($\u0026quot;Timezones under country \u0027{countryCode}\u0027:\u0026quot;);\nforeach (string tz in timezones)\n{\n    Console.WriteLine($\u0026quot;{tz}\u0026quot;);\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E11. Country Name \uD83E\uDC7A Country ISO Code\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E// Country Name \uD83E\uDC7A Country Code\nstring countryName = \u0026quot;United States\u0026quot;;\nstring isoCountryCode = TimezoneHelper.CountryNameToAbbreviation(countryName);\nConsole.WriteLine($\u0026quot;Country name \u0027{countryName}\u0027 has the abbreviation: {isoCountryCode}\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E12. Country ISO Code \uD83E\uDC7A Country Names\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E// Country Code \uD83E\uDC7A Country Name \nstring isoCode = \u0026quot;US\u0026quot;;\nstring fullCountryName = TimezoneHelper.AbbreviationToCountryName(isoCode);\nConsole.WriteLine($\u0026quot;Abbreviation \u0027{isoCode}\u0027 corresponds to the country: {fullCountryName}\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E13. Timezones Sharing Same Offset (In Minuits)\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//Find timezones sharing same offset (\u002B5:30 is 330 mins)\nvar timezonesSharingSameOffset = TimezoneHelper.OffsetToTimezones(330);\ntimezonesSharingSameOffset.ForEach(timeZone =\u0026gt;\n{\n    Console.WriteLine(timeZone.DisplayName);\n});\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E14. All Timezones\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//Get all timezones\nvar allTimezones = TimezoneHelper.GetAllTimezones();\nallTimezones.ForEach(timeZone =\u0026gt;\n{\n    Console.WriteLine(timeZone.ToString());\n});\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E15. All Countries\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E//Get all countries\nList\u0026lt;(string CountryCode, string CountryName)\u0026gt; allCountries = TimezoneHelper.GetAllCountries();\nallCountries.ForEach(country =\u0026gt;\n{\n    Console.WriteLine($\u0026quot;{country.CountryCode} | {country.CountryName}\u0026quot;);\n});\n\u003C/code\u003E\u003C/pre\u003E\n",
    "PackageIcon": "https://iili.io/HUQ2pxn.png",
    "Description": "An easy to use utility to easily convert timezones from any timezones, countries, offsets, short and long names etc.. while leveraging the powerfull NodaTime and globaliazation in the background."
  },
  {
    "Name": "Twileloop.SpreadSheet",
    "GithubURL": "https://github.com/sangeethnandakumar/Twileloop.SpreadSheet",
    "HTMLContent": "\u003Cp\u003E\uFEFF\u003C!-- PROJECT LOGO --\u003E\n\u003Cbr /\u003E\u003C/p\u003E\n\u003Cdiv align=\u0022center\u0022\u003E\n  \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.SpreadSheet\u0022\u003E\n    \u003Cimg src=\u0022https://iili.io/HUaMukB.png\u0022 alt=\u0022Logo\u0022 width=\u002280\u0022 height=\u002280\u0022\u003E\n  \u003C/a\u003E\n  \u003Ch1 align=\u0022center\u0022\u003E Twileloop.SpreadSheet\u003C/h1\u003E\n  \u003Ch4 align=\u0022center\u0022\u003E Single API | Cross-Format | Free \u0026 Fast \u003C/h4\u003E\n\u003C/div\u003E\n\u003Cp\u003ERead full integration guide: https://packages.twileloop.com/Twileloop.SpreadSheet\u003C/p\u003E\n\u003Cp\u003EMore trusted packages from Twileloop: https://packages.twileloop.com\u003C/p\u003E\n\u003Ch2\u003EAbout\u003C/h2\u003E\n\u003Cp\u003EA cross format spreadsheet accessor that empowers you to effortlessly read, write, copy, and move data across popular spreadsheet formats like Google Sheets and Microsoft Excel.\u003C/p\u003E\n\u003Ch2\u003ELicense\u003C/h2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ETwileloop.SpreadSheet is licensed under the MIT License. See the LICENSE file for more details.\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch4\u003EThis library is absolutely free. If it gives you a smile, A small coffee would be a great way to support my work. Thank you for considering it!\u003C/h4\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.buymeacoffee.com/sangeethnanda\u0022\u003E\u003Cimg src=\u0022https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\u0022 alt=\u0022\u0026quot;Buy Me A Coffee\u0026quot;\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Ch1\u003EUsage\u003C/h1\u003E\n\u003Cp\u003E\u003Cem\u003E\u003Cstrong\u003ETo get started, You have to install atleast 2 packages:\u003C/strong\u003E\u003C/em\u003E\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EThe core \u003Ccode\u003ETwileloop.SpreadSheet\u003C/code\u003E package\u003C/li\u003E\n\u003Cli\u003EA driver package for your desired spreadsheet (Microsoft Excel, Google Sheet etc...)\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C/strong\u003E\n\u003Cem\u003E\u003Cstrong\u003EIn the backstage, Twileloop.SpreadSheet uses NPOI to connect with Excel files and Google.Apis.Sheets.v4 to connect with Google Sheets\u003C/strong\u003E\u003C/em\u003E\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Chr/\u003E\n\u003Ch2\u003E1. Install Core Package\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-bash\u0022\u003Edotnet add package Twileloop.SpreadSheet\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E2. Install Driver Packages (One or More)\u003C/h2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EThere is no need to install all these driver packages, If you only prefer to work with Microsoft Excel, ignore the Google Sheets driver package\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Cp\u003E| Driver | To Use | Install Package\u003Cbr /\u003E\n| :---: | :---:   | :---:\n| \u003Cimg src=\u0022https://iili.io/HUaMOEG.png\u0022 alt=\u0022Logo\u0022 height=\u002230\u0022\u003E | Google Sheet | \u003Ccode\u003Edotnet add package Twileloop.SpreadSheet.GoogleSheet\u003C/code\u003E\u003Cbr /\u003E\n| \u003Cimg src=\u0022https://iili.io/HUaM8Yl.png\u0022 alt=\u0022Logo\u0022 height=\u002230\u0022\u003E | Microsoft Excel | \u003Ccode\u003Edotnet add package Twileloop.SpreadSheet.MicrosoftExcel\u003C/code\u003E\u003C/p\u003E\n\u003Ch3\u003ESupported Features\u003C/h3\u003E\n\u003Cp\u003E| Feature     | Microsoft Excel | Google Sheets\n| ---      | ---       | ---\n| Plan Text Reads | \u2705 | \u2705\n| Plan Text Writes | \u2705 | \u2705\n| Switch Sheets | \u2705 | \u2705\n| Text Formatting | \u2705 | \u2705\n| Cell Formatting | \u2705 | \u2705\n| Border Formatting | \uD83D\uDEA7 | \uD83D\uDEA7\n| Cell Merging | \uD83D\uDEA7 | \uD83D\uDEA7\n| Image Reads | \uD83D\uDEA7 | \uD83D\uDEA7\n| Image Writes | \uD83D\uDEA7 | \uD83D\uDEA7\n| Formulas | \u274C | \u274C\n| Draw Graph | \u274C | \u274C\u003C/p\u003E\n\u003Cp\u003E\u2705 - Available \u00A0\u00A0\u00A0\n\uD83D\uDEA7 - Work In Progress \u00A0\u00A0\u00A0\n\u274C - Not Available\u003C/p\u003E\n\u003Ch2\u003E3. Initialize Driver(s)\u003C/h2\u003E\n\u003Cp\u003EOnce installed packages, Initialize your drivers\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    using Twileloop.SpreadSheet.GoogleSheet;\n    using Twileloop.SpreadSheet.MicrosoftExcel;\n\n    //Step 1: Initialize your prefered spreadsheet drivers\n    var excelDriver = new MicrosoftExcelDriver(new MicrosoftExcelOptions\n    {\n        FileLocation = \u0026quot;\u0026lt;YOUR_EXCEL_FILE_LOCATION\u0026gt;\u0026quot;\n    });\n    \n    var googleSheetsDriver = new GoogleSheetDriver(new GoogleSheetOptions\n    {\n        SheetsURI = new Uri(\u0026quot;\u0026lt;YOUR_GOOGLE_SHEETS_URL\u0026gt;\u0026quot;),\n        Credential = @\u0026quot;D:\\secrets.json\u0026quot; //Location of your credential file\n    });\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003EWarning\u003C/strong\u003E\n\u003Cem\u003E\u003Cstrong\u003EIf planning to use Google Sheets, You have to:\u003C/strong\u003E\u003C/em\u003E\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Col\u003E\n\u003Cli\u003ECreate a service account in Google Cloud Platform (GCP)\u003C/li\u003E\n\u003Cli\u003EDownload the credentials \u003Ccode\u003Esecrets.json\u003C/code\u003E from GCP console and save it\u003C/li\u003E\n\u003Cli\u003EEnable Google Sheets API in your GCP console\u003C/li\u003E\n\u003Cli\u003EThen share your Google Sheet with the service account\u0027s email id abd assign as \u0027Editor\u0027 (for write permission)\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003EThe above process is out of scope to explain more here in detail.\u003C/p\u003E\n\u003Cp\u003EHere\u0027s a good video tutorial to help you get started (Upto 3:07): https://www.youtube.com/watch?v=fxGeppjO0Mg\u003C/p\u003E\n\u003Ch2\u003E4. Get An Accessor\u003C/h2\u003E\n\u003Cp\u003EOnce driver(s) are initialized, Create an accessor to access the spreadsheet\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    using Twileloop.SpreadSheet.Factory;\n\n    //Step 2: Use that driver to build a spreadsheet accessor\n    var excelAccessor = SpreadSheetFactory.CreateAccessor(excelDriver);\n    var googleSheetAccessor = SpreadSheetFactory.CreateAccessor(googleSheetsDriver);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EAn accessor wil give you 3 handles:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EReader\u003C/strong\u003E =\u0026gt; Use this handle to read from your spreadsheets\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003EWriter\u003C/strong\u003E =\u0026gt; Use this handle to write to your spreadsheets\u003C/li\u003E\n\u003Cli\u003E\u003Cstrong\u003EController\u003C/strong\u003E =\u0026gt; Use this handle to control your spreadsheets\u003C/li\u003E\n\u003C/ul\u003E\n\u003Ch2\u003E5. Load WorkSheet\u003C/h2\u003E\n\u003Cp\u003EFirst step is to load your prefered sheet by controlling the spreadsheet\u003C/p\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EYou must load a worksheet using the Controller before reading or writing to your spreadsheet\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Step 3: Now this accessor can Read/Write and Control spreadsheet. Let\u0027s open Sheet1\n    using (excelAccessor)\n    {\n        excelAccessor.Controller.LoadSheet(\u0026quot;Sheet1\u0026quot;);\n    }\n    \n    using (googleSheetAccessor)\n    {\n        excelAccessor.Controller.LoadSheet(\u0026quot;Sheet1\u0026quot;);\n    }\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E6. Read SpreadSheet\u003C/h2\u003E\n\u003Cp\u003EReading is as simple as this\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Step 4: Different Ways To Read Data\n    using (excelAccessor)\n    {\n        //Load prefered sheet\n        excelAccessor.Controller.LoadSheet(\u0026quot;Sheet1\u0026quot;);\n    \n        //Read a single cell\n        string data1 = excelAccessor.Reader.ReadCell(1, 1);\n        string data2 = excelAccessor.Reader.ReadCell(\u0026quot;A10\u0026quot;);\n    \n        //Read a full row in bulk\n        string[] data3 = excelAccessor.Reader.ReadRow(1);\n        string[] data4 = excelAccessor.Reader.ReadRow(\u0026quot;C9\u0026quot;);\n    \n        //Read a full column in bulk\n        string[] data5 = excelAccessor.Reader.ReadColumn(1);\n        string[] data6 = excelAccessor.Reader.ReadColumn(\u0026quot;D20\u0026quot;);\n    \n        //Select an area and extract data in bulk\n        DataTable data7 = excelAccessor.Reader.ReadSelection(1, 1, 10, 10);\n        DataTable data8 = excelAccessor.Reader.ReadSelection(\u0026quot;A1\u0026quot;, \u0026quot;J10\u0026quot;);\n    }\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EIf you\u0027re using Google Sheet, It\u0027s recommended to use any bulk reads/writes operations, Because in case of Google Sheets calling \u003Ccode\u003EReadCell()\u003C/code\u003E multiple times is not efficient as it fires multiple API calls to Google to read cells.\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EBulk reads/writes will fire only once and get data in one go. If you just need to read a single cell, Feel free to use \u003Ccode\u003EReadCell()\u003C/code\u003E since it makes sense in a read and drop situation\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch2\u003E7. Write SpreadSheet\u003C/h2\u003E\n\u003Cp\u003EWriting is as simple as this\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Step 5: Different Ways To Write Data\n    using (googleSheetAccessor)\n    {\n        googleSheetAccessor.Controller.LoadSheet(\u0026quot;Sheet1\u0026quot;);\n    \n        //Write a single cell\n        googleSheetAccessor.Writer.WriteCell(1, 1, \u0026quot;Country\u0026quot;);\n        googleSheetAccessor.Writer.WriteCell(\u0026quot;C17\u0026quot;, \u0026quot;Country\u0026quot;);\n    \n        //Write a full row in bulk\n        googleSheetAccessor.Writer.WriteRow(1, new string[] { \u0026quot;USA\u0026quot;, \u0026quot;China\u0026quot;, \u0026quot;Russia\u0026quot;, \u0026quot;India\u0026quot; });\n        googleSheetAccessor.Writer.WriteRow(\u0026quot;A1\u0026quot;, new string[] { \u0026quot;USA\u0026quot;, \u0026quot;China\u0026quot;, \u0026quot;Russia\u0026quot;, \u0026quot;India\u0026quot; });\n    \n        //Write a full column in bulk\n        googleSheetAccessor.Writer.WriteColumn(1, new string[] { \u0026quot;USA\u0026quot;, \u0026quot;China\u0026quot;, \u0026quot;Russia\u0026quot;, \u0026quot;India\u0026quot; });\n        googleSheetAccessor.Writer.WriteColumn(\u0026quot;B22\u0026quot;, new string[] { \u0026quot;USA\u0026quot;, \u0026quot;China\u0026quot;, \u0026quot;Russia\u0026quot;, \u0026quot;India\u0026quot; });\n    \n        //Select an area and write a grid in bulk\n        DataTable grid = new DataTable();\n        grid.Columns.Add(\u0026quot;Rank\u0026quot;);\n        grid.Columns.Add(\u0026quot;Powerfull Militaries\u0026quot;);\n    \n        grid.Rows.Add(1, \u0026quot;USA\u0026quot;);\n        grid.Rows.Add(2, \u0026quot;China\u0026quot;);\n        grid.Rows.Add(3, \u0026quot;Russia\u0026quot;);\n        grid.Rows.Add(4, \u0026quot;India\u0026quot;);\n        grid.Rows.Add(5, \u0026quot;France\u0026quot;);\n    \n        googleSheetAccessor.Writer.WriteSelection(1, 1, grid);\n        googleSheetAccessor.Writer.WriteSelection(\u0026quot;D20\u0026quot;, grid);\n    }\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E8. Read/Write Multiple SpreadSheets In One Go\u003C/h2\u003E\n\u003Cp\u003EOpen multiple spreadsheets in one go by cascading accessors then move data in between\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Read and write both spreadsheets at once\n    using (excelAccessor)\n    {\n        using (googleSheetAccessor)\n        {\n            //Step 1: Open both spreadsheets\n            excelAccessor.Controller.LoadSheet(\u0026quot;Sheet1\u0026quot;);\n            googleSheetAccessor.Controller.LoadSheet(\u0026quot;Sheet1\u0026quot;);\n    \n            //Step 2: Read from excel\n            DataTable excelData = excelAccessor.Reader.ReadSelection(\u0026quot;A1\u0026quot;, \u0026quot;D10\u0026quot;);\n    \n            //Step 3: Then write it to Google Sheet\n            googleSheetAccessor.Writer.WriteSelection(\u0026quot;C1\u0026quot;, excelData);                    \n        }\n    }\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E9. Sheets Controls\u003C/h2\u003E\n\u003Cp\u003ECreate one or more sheets, Get all sheets or find active sheet name\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E    //Create one or more new sheets\n    excelAccessor.Controller.CreateSheets(\u0026quot;Sheet1\u0026quot;, \u0026quot;Sheet2\u0026quot;, \u0026quot;Sheet3\u0026quot;);\n    googleSheetAccessor.Controller.CreateSheets(\u0026quot;Sheet1\u0026quot;, \u0026quot;Sheet2\u0026quot;);\n\n    //Get list of sheets\n    var allExcelSheets = excelAccessor.Controller.GetSheets();\n    var allGoogleSheetSheet = googleSheetAccessor.Controller.GetSheets();\n\n    //Get active sheet name\n    var activeExcelSheet = excelAccessor.Controller.GetActiveSheet();\n    var googleSheetSheet = googleSheetAccessor.Controller.GetActiveSheet();\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003E10. Styling And Formatting\u003C/h2\u003E\n\u003Cp\u003EStyling is easy as hell. Just define all your different styles/formatting globally and apply it for a selected cell range\u003C/p\u003E\n\u003Cp\u003EA formatting can have 3 types\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003EText Formatting\u003C/li\u003E\n\u003Cli\u003ECell Formatting\u003C/li\u003E\n\u003Cli\u003EBorder Formatting\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EKeep \u003Ccode\u003ENULL\u003C/code\u003E for whichever format type you don\u0027t want to change\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E\n    //Define your formatting, Let\u0027s say for titles\n    var titleFormat = new Formatting\n    {\n        //Text formatting\n        TextFormating = new TextFormating\n        {\n            Bold = false,\n            Italic = true,\n            Underline = false,\n            Size = 15,\n            HorizontalAlignment = HorizontalAllignment.RIGHT,\n            VerticalAlignment = VerticalAllignment.BOTTOM,\n            Font = \u0026quot;Impact\u0026quot;,\n            Color = System.Drawing.Color.White,\n        },\n        //Cell formatting\n        CellFormating = new CellFormating\n        {\n            BackgroundColor = System.Drawing.Color.IndianRed\n        },\n        //Border formatting\n        BorderFormating = new BorderFormating\n        {\n            TopBorder = true,\n            LeftBorder = true,\n            RightBorder = true,\n            BottomBorder = true,\n            BorderType = BorderType.SOLID,\n            Thickness = 5\n        }\n    };\n\n    //Then simply apply it as needed for a cell range\n    excelAccessor.Writer.ApplyFormatting(1, 1, 10, 4, titleFormat);\n    googleSheetAccessor.Writer.ApplyFormatting(1, 1, 10, 4, titleFormat);\n\u003C/code\u003E\u003C/pre\u003E\n",
    "PackageIcon": "https://iili.io/HUaMukB.png",
    "Description": "A cross format spreadsheet accessor that empowers you to effortlessly read, write, copy, and move data across popular spreadsheet formats like Google Sheets and Microsoft Excel."
  },
  {
    "Name": "Twileloop.JetAPI",
    "GithubURL": "https://github.com/sangeethnandakumar/Twileloop.JetAPI",
    "HTMLContent": "\u003C!-- PROJECT LOGO --\u003E\n\u003Cbr /\u003E\n\u003Cdiv align=\u0022center\u0022\u003E\n  \u003Ca href=\u0022https://github.com/sangeethnandakumar/Twileloop.JetAPI\u0022\u003E\n    \u003Cimg src=\u0022https://iili.io/HgOLhu9.png\u0022 alt=\u0022Logo\u0022 width=\u002280\u0022 height=\u002280\u0022\u003E\n  \u003C/a\u003E\n  \u003Ch1 align=\u0022center\u0022\u003E Twileloop.JetAPI \u003C/h1\u003E \u003Csmall style=\u0022color: red\u0022\u003E[BETA Pre-Release]\u003C/small\u003E\n  \u003Ch4 align=\u0022center\u0022\u003E Simple | Fluent | Fast \u003C/h4\u003E\n\u003C/div\u003E\n\u003Ch2\u003EAbout\u003C/h2\u003E\n\u003Cp\u003EAn easy to use conveinent fluent syntaxed HTTPClient for all your personal or commercial .NET apps. Do API calls with ease\u003C/p\u003E\n\u003Ch2\u003ELicense\u003C/h2\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003ETwileloop.JetAPI is licensed under the MIT License. See the LICENSE file for more details.\u003C/p\u003E\n\u003C/blockquote\u003E\n\u003Ch4\u003EThis library is absolutely free. If it gives you a smile, A small coffee would be a great way to support my work. Thank you for considering it!\u003C/h4\u003E\n\u003Cp\u003E\u003Ca href=\u0022https://www.buymeacoffee.com/sangeethnanda\u0022\u003E\u003Cimg src=\u0022https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\u0022 alt=\u0022\u0026quot;Buy Me A Coffee\u0026quot;\u0022 /\u003E\u003C/a\u003E\u003C/p\u003E\n\u003Ch1\u003ESimple GET\u003C/h1\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;dynamic\u0026gt;()\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts/1\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A With Query Params\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;dynamic\u0026gt;()\n                         .WithQueries(\n                             new Param(\u0026quot;postId\u0026quot;, 2),\n                             new Param(\u0026quot;date\u0026quot;, \u0026quot;1996-10-28\u0026quot;)\n                         )\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/comments\u0026quot;);\u0060\u0060\u0060\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A With Headers\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;dynamic\u0026gt;()\n                         .WithQueries(\n                             new Param(\u0026quot;postId\u0026quot;, 3)\n                         )\n                         .WithHeaders(\n                             new Param(\u0026quot;x-request-by\u0026quot;, \u0026quot;name\u0026quot;),\n                             new Param(\u0026quot;x-limit\u0026quot;, 150)\n                         )\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/comments\u0026quot;);                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/comments\u0026quot;);\u0060\u0060\u0060\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EPOST \uD83E\uDC1A With JSON String\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar jsonString = @\u0026quot;{\u0026quot;\u0026quot;title\u0026quot;\u0026quot;:\u0026quot;\u0026quot;Foo\u0026quot;\u0026quot;,\u0026quot;\u0026quot;bar\u0026quot;\u0026quot;:\u0026quot;\u0026quot;Bar\u0026quot;\u0026quot;,\u0026quot;\u0026quot;userid\u0026quot;\u0026quot;:1}\u0026quot;;\n\nvar response = await new JetRequest\u0026lt;dynamic\u0026gt;()\n                        .Post()\n                        .WithBody(\n                            new RawBody(ContentType.Json, jsonString)\n                        )\n                        .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EPUT \uD83E\uDC1A With Object As JSON\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar instance = new {\n    Title = \u0026quot;Foo\u0026quot;,\n    Bar = \u0026quot;Bar\u0026quot;,\n    UserId = 1\n};\n\nvar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                        .Put()\n                        .WithBody(\n                            new RawBody(ContentType.Json, instance)\n                        )\n                        .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A With Basic-Authentication\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                         .Get()\n                         .WithAuthentication(new BasicAuthentication {\n                             Username = \u0026quot;username\u0026quot;,\n                             Password = \u0026quot;password\u0026quot;\n                         })\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts/5\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A With JWT Bearer-Authentication\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                         .Get()\n                         .WithAuthentication(new BearerToken(\u0026quot;\u0026lt;BEARER_TOKEN\u0026gt;\u0026quot;))\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts/5\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A With API_KEY Authentication\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                         .Get()\n                         .WithAuthentication(new ApiKey(\u0026quot;Api-Key\u0026quot;, \u0026quot;\u0026lt;API_KEY\u0026gt;\u0026quot;))\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts/5\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EPATCH \uD83E\uDC1A And Handle Exceptions Yourself\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                         .Patch()\n                         .HandleExceptions(\n                             ex =\u0026gt; Console.WriteLine($\u0026quot;An exception occured. Message: {ex.Message}\u0026quot;);\n                         )\n                         .ExecuteAsync(\u0026quot;htt://jsonplaceholder.typicode.com/posts/5\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A With Success/Failure Captures\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                         .Get()\n                         .WithCaptures(\n                             successResponse =\u0026gt; Console.WriteLine(\u0026quot;Success\u0026quot;);,\n                             failureResponse =\u0026gt; Console.WriteLine(\u0026quot;Failure\u0026quot;);\n                         )\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts/5\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EPUT \uD83E\uDC1A With Custom Captures Based On HTTP StatusCode\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                         .Put()\n                         .WithCaptures(\n                             (HttpStatusCode.OK, () =\u0026gt; Console.WriteLine(\u0026quot;Ok\u0026quot;)),\n                             (HttpStatusCode.NotFound, () =\u0026gt; Console.WriteLine(\u0026quot;Not Found\u0026quot;)),\n                             (HttpStatusCode.Unauthorized, () =\u0026gt; Console.WriteLine(\u0026quot;UnAuthorized\u0026quot;)),\n                             (HttpStatusCode.Forbidden, () =\u0026gt; Console.WriteLine(\u0026quot;Forbidden\u0026quot;))\n                         )\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/fake\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A As JSON/XML/HTML or TEXT\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                          .Get()\n                          .FetchAs(ContentType.XML)\n                          .ExecuteAsync(\u0026quot;https://samplexml.com/auth/demoxml.xml\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EGET \uD83E\uDC1A And Pass Request Cookies\u003C/h2\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar response = await new JetRequest\u0026lt;MyResponseModel\u0026gt;()\n                          .WithCookies(\n                              new Param(\u0026quot;Cookie1\u0026quot;, \u0026quot;\u0026lt;CookieValue1\u0026gt;\u0026quot;),\n                              new Param(\u0026quot;Cookie2\u0026quot;, \u0026quot;\u0026lt;CookieValue2\u0026gt;\u0026quot;)\n                           )\n                          .FetchAs(ContentType.HTML)\n                          .ExecuteAsync(\u0026quot;https://google.com\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n\u003Ch2\u003EListen To Events With Interceptors\u003C/h2\u003E\n\u003Cp\u003ECreate your own intercepter by inheriting from Interceptor base class\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Epublic class CustomInterceptor : Interceptor {\n\n        public override void OnInit() {\n            Console.WriteLine(\u0026quot;Started...\u0026quot;);\n            base.OnInit();\n        }\n\n        public override void OnRequesting(Request request) {\n            Console.WriteLine(\u0026quot;Let\u0027s modify request from interceptor\u0026quot;);\n            request.HttpClient.DefaultRequestHeaders.Add(\u0026quot;Accept\u0026quot;, \u0026quot;application/json\u0026quot;);\n\n            Console.WriteLine(\u0026quot;Enough. Now start requesting...\u0026quot;);\n            base.OnRequesting(request);\n        }\n\n        public override void OnResponseReceived() {\n            Console.WriteLine(\u0026quot;Got response...\u0026quot;);\n            base.OnResponseReceived();\n        }\n\n    }\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EDo your stuff above. Alter anything before request goes or log result after response came etc.. Now let\u0027s attach this interceptor to JetAPI\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar interceptor = new CustomInterceptor();\n\n var response = await new JetRequest\u0026lt;dynamic\u0026gt;()\n                         .Post()\n                         .WithAuthentication(new BearerToken(\u0026quot;\u0026lt;BEARER_TOKEN\u0026gt;\u0026quot;))\n                         .WithInterceptor(interceptor)\n                         .ExecuteAsync(\u0026quot;https://jsonplaceholder.typicode.com/posts/5\u0026quot;);\n\u003C/code\u003E\u003C/pre\u003E\n",
    "PackageIcon": "https://iili.io/HgOLhu9.png",
    "Description": "An easy to use conveinent fluent syntaxed HTTPClient for all your personal or commercial .NET apps. Do API calls with ease"
  }
]